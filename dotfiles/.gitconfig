[user]
	email = luca.trazzi@adesso.ch
	name = lucatrazzi

[includeIf "gitdir:~/repos/swisscom-*/"]
  path = .gitconfig-swisscom

[pull]
	rebase = true
[credential]
	helper = libsecret
[init]
	defaultBranch = main
[rebase]
	autoStash = true
  
[core]
  ignorecase = false
  pager = delta 
	eol = lf
	autocrlf = false

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true  # use n and N to move between diff sections
  features = decorations
  side-by-side = true
  ; line-numbers = true ; very slow performances
  theme = gruvbox-dark
  syntax-theme = gruvbox-dark

[delta "interactive"]
  keep-plus-minus-markers = false

[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit
  hunk-header-decoration-style = blue box
  hunk-header-style = file line-number syntax   
    
[diff]
  tool = delta
  colorMoved = default
  
; [merge]
;   tool = delta
;   conflictstyle = diff3
  
; [mergetool "delta"]
;   path = /usr/bin/delta
;   trustExitCode = false

[merge]
  tool = smerge

[mergetool]
  keepBackup = false
  prompt = false
 
[mergetool "smerge"]
  cmd = smerge mergetool "$BASE" "$LOCAL" "$REMOTE" -o "$MERGED"
  trustExitCode = true
    
[alias]
	aliases = config --get-regexp ^alias

	#TRIO
	co = checkout
	ci = commit
	sh = show -M
	df = diff -M
	#lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --name-only
	#lgp = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -p -M
	a = add
	all = add -A

	# tree  branches, author, time
	t = log --graph --pretty=format:'%Cblue%h%Creset %s %Creset%Cgreen(%an %cr)%Creset%Cred%d' --abbrev-commit
	history = log --oneline --graph --decorate --all
	last = diff-tree --no-commit-id --name-only -r HEAD
	ll = log --pretty=format:\"%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]\" --decorate --numstat
	lo = log --oneline
	ls = log --pretty=format:\"%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]\" --decorate
	po = !git push --set-upstream origin $(git symbolic-ref --short HEAD)
	pof = !git push --set-upstream origin $(git symbolic-ref --short HEAD) --force-with-lease
	poff = !git push --set-upstream origin $(git symbolic-ref --short HEAD) --force
	pl = !git pull --no-edit

	# PERSO
	poop = stash pop
	st = status --untracked-files=all --branch
	c = commit
	cp = cherry-pick
	cm = commit
	ap = add -p
	cp = checkout -p
	fetch = fetch --prune
	f = fetch --prune
	cam = commit --amend --no-edit
	came = commit --amend
	rb = rebase
	rbi = rebase --interactive
	rbc = rebase --continue
	rba = rebase --abort
	m = merge
	ma = merge --abort
	mc = merge --continue
	ms = merge --skip
	rmc = rm --cached
	ls = ls-files
	lsf = !git ls-files | grep -i
	fk = fsck
	g = grep -p
	l = log --oneline
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --name-only
	lga = log --oneline --graph --decorate --all
	lgaa = log --graph --decorate --all
	t = log --graph --pretty=format:'%Cblue%h%Creset %s %Creset%Cgreen(%an %ad)%Creset%Cred%d' --abbrev-commit
	lgb = log --oneline --graph --decorate --branches
	b = branch
	br = branch -r
	ba = branch -a
	bv = branch -v
	bav = branch -av
	bva = branch -av
	barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
	flat = clone --depth 1
	subrepo = !sh -c 'filter-branch --prune-empty --subdirectory-filter $1 master' -
	human = name-rev --name-only --refs=refs/heads/*
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
	snapshot = !git stash savesnapshot: $(date)&& git stash applystash@{0}
	rup = remote update
	sthcom = commit -a -mSTASH
	pf = push -f
	last = log -1 --stat
	co = checkout
	cob = checkout -b
  track = "!git branch --set-upstream-to origin/\"$(git rev-parse --abbrev-ref HEAD)\""
	cl = clone
	ci = commit
	dt = difftool
	dtd = difftool -d
	mt = mergetool
	d = diff
	dc = diff --cached
	wdiff = diff --color-words
	dw = diff --color-words
	dwc = diff --color-words --cached
	wdc = diff --color-words --cached
	root = !sh -c \"cd $(git rev-parse --show-toplevel)\"
	wip = commit -am WIP
	standup = "!git log --since yesterday  --author `git config user.email` --pretty=oneline"
	hash = rev-parse HEAD

	# flush = !sh -c "git branch --merged | grep -v '*' | xargs -n 1 git branch -d"
	nuke = !sh -c 'git-nuke' -
	flush = "!git branch --no-merged | grep -v 'master|develop' | xargs -n 1 git nuke"

	# ignoring
	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
	ignored = !git ls-files -v | grep "^[[:lower:]]"
	root = !pwd
	lgp = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -p -M

	# flow
	feature = "!f() { feature=${1}; git flow feature start $feature;  }; f"
	bugfix = "!f() { bugfix=${1}; git flow bugfix start $bugfix;  }; f"
  hotfix = "!f() { hotfix=${1}; git flow hotfix start $hotfix;  }; f"
	release = "!f() { release=${1}; git flow release start $release;  }; f"
	
        # fixup
	fixup = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && GIT_SEQUENCE_EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
	
	# undo
	undop = restore --staged -p # to unstage hunks
	undo = reset --soft HEAD^
	unstage = reset HEAD --
  # delete untracked files & directories
	clearall = clean -fd
	# unstage = clean -fd 
	# unstage = clean -fdx
	discard = checkout -- .
  
	rebsqua = "!f() { number_of_commits=${1}; git rebase -i HEAD~$number_of_commits;  }; f"
 
  feat = "!f() { git commit -m \"feat: $1\";  }; f"
  chore = "!f() { git commit -m \"chore: $1\";  }; f"
  refactor = "!f() { git commit -m \"refactor: $1\";  }; f"
  fix = "!f() { git commit -m \"fix: $1\";  }; f"
  docs = "!f() { git commit -m \"docs: $1\";  }; f"
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
